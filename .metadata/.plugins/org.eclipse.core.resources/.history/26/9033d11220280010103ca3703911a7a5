package com.novelsbr.backend.controlleradivices;

import java.time.Instant;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import com.novelsbr.backend.domain.dto.ProblamDTO;
import com.novelsbr.backend.exceptions.EntityNotFoundException;
import com.novelsbr.backend.exceptions.ExistingAuthorException;
import com.novelsbr.backend.exceptions.ExistingNovelException;

@ControllerAdvice
public class ApiExceptionHandler {

	@ExceptionHandler(ExistingAuthorException.class)
	public ResponseEntity<ProblamDTO> existingAuthorException() {
		HttpStatus status = HttpStatus.BAD_REQUEST;
		
		ProblamDTO problamDTO = new ProblamDTO("Existing Author", status.value(), Instant.now());

		return ResponseEntity.status(status).body(problamDTO);
	}
	
	@ExceptionHandler(ExistingNovelException.class)
	public ResponseEntity<ProblamDTO> existingNovelException() {
		HttpStatus status = HttpStatus.BAD_REQUEST;
		
		ProblamDTO problamDTO = new ProblamDTO("Existing Novel", status.value(), Instant.now());

		return ResponseEntity.status(status).body(problamDTO);
	}
	
	@ExceptionHandler(EntityNotFoundException.class)
	public ResponseEntity<ProblamDTO> entityNotFoundException() {
		HttpStatus status = HttpStatus.NOT_FOUND;
		
		ProblamDTO problamDTO = new ProblamDTO("Entity not found", status.value(), Instant.now());

		return ResponseEntity.status(status).body(problamDTO);
	}
}
