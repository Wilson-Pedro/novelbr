package com.novelsbr.backend.web.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.novelsbr.backend.domain.dto.AuthorNovelInfoDTO;
import com.novelsbr.backend.domain.dto.CardNovelDTO;
import com.novelsbr.backend.domain.dto.NovelDTO;
import com.novelsbr.backend.domain.dto.PageResponseDTO;
import com.novelsbr.backend.domain.entities.Novel;
import com.novelsbr.backend.domain.records.ChangeStatusNovelRequest;
import com.novelsbr.backend.services.NovelService;
import com.novelsbr.backend.web.api.NovelAPI;

@RestController
@CrossOrigin("http://localhost:3000")
public class NovelController implements NovelAPI {
	
	@Autowired
	private NovelService novelService;
	
	@GetMapping
	public ResponseEntity<List<NovelDTO>> findAll() {
		List<NovelDTO> novlesDTO = novelService.findAll()
				.stream().map(x -> new NovelDTO(x)).toList();
		return ResponseEntity.ok(novlesDTO);
	}

	@PostMapping("/")
	public ResponseEntity<NovelDTO> save(@RequestBody NovelDTO novelDTO) {
		Novel novel = novelService.save(novelDTO);
		return ResponseEntity.status(201).body(new NovelDTO(novel));
	}
	
	@GetMapping("/novelCards")
	public ResponseEntity<List<CardNovelDTO>> findNovelCards() {
		return ResponseEntity.ok(novelService.findNovelCards());
	}
	
	@GetMapping("/novelCards/author/{username}")
	public ResponseEntity<List<CardNovelDTO>> findNovelCardsByUsername(@PathVariable String username) {
		return ResponseEntity.ok(novelService.findNovelCardsByUsername(username));
	}
	
	@GetMapping("/novelCards/{novelId}")
	public ResponseEntity<AuthorNovelInfoDTO> findNovelInfoByNovelId(@PathVariable Long novelId) {
		return ResponseEntity.ok(novelService.findNovelInfoByNovelId(novelId));
	}
	
	@GetMapping("/{novelName}")
	public ResponseEntity<NovelDTO> findNovelByNovelName(@PathVariable String novelName) {
		Novel novel = novelService.findNovelByNovelName(novelName);
		return ResponseEntity.ok(new NovelDTO(novel));
	}
	
	@GetMapping("/genders")
	public ResponseEntity<Page<CardNovelDTO>> findNovelCardsByGenders(
			@RequestParam(required = false) List<String> genders,
			@RequestParam(defaultValue = "0") int page,
			@RequestParam(defaultValue = "10") int size) {
		Page<CardNovelDTO> cardNovels = novelService.findNovelCardsByGenders(genders, page, size);
		return ResponseEntity.ok(cardNovels);
	}
	
	@GetMapping("/search/{novelName}")
	public ResponseEntity<PageResponseDTO<CardNovelDTO>> searchNovel(
			@PathVariable String novelName,
			@RequestParam(defaultValue = "0") int page,
			@RequestParam(defaultValue = "10") int size) {
		
		if(novelName == "" || novelName == null) {
			return ResponseEntity.ok(new PageResponseDTO<>(novelService.findAll(page, size)
					.map(x -> new CardNovelDTO(x))));
		}
		Page<CardNovelDTO> novlesDTO = novelService.searchNovel(novelName, page, size)
				.map(x -> new CardNovelDTO(x));
		return ResponseEntity.ok(new PageResponseDTO<>(novlesDTO));
	}
	
	@GetMapping("/pages")
	public ResponseEntity<PageResponseDTO<CardNovelDTO>> pages(
			@RequestParam(defaultValue = "0") int page,
			@RequestParam(defaultValue = "10") int size) {
		Page<CardNovelDTO> novlesDTO = novelService.findAll(page, size)
				.map(x -> new CardNovelDTO(x));
		return ResponseEntity.ok(new PageResponseDTO<>(novlesDTO));
	}
	
	@PatchMapping("/changeNovelStatus")
	public ResponseEntity<Void> changeNovelStatus(@RequestBody ChangeStatusNovelRequest request) {
		novelService.changeNovelStatus(request.novelId(), request.novelStatusId());
		return ResponseEntity.noContent().build();
	}
	
	@PatchMapping("/changeNovelImageUri")
	public ResponseEntity<Void> changeNovelImageUri(
			@RequestParam("file") MultipartFile file,
			@RequestParam("novelId") Long novelId,
			@RequestParam("imageUri") String imageUri) {
		novelService.changeNovelImageUri(novelId, imageUri, file);
		return ResponseEntity.noContent().build();
	}
}
