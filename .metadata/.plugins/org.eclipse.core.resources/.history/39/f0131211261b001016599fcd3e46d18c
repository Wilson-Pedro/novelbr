package com.novelsbr.backend.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.novelsbr.backend.services.AuthorDetailsService;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Autowired
	AuthorDetailsService authorDetailsService;
	
	@Bean
	PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	AuthenticationManager authenticationManager() throws Exception {
		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setUserDetailsService(authorDetailsService);
		provider.setPasswordEncoder(passwordEncoder());
		return new ProviderManager(provider);
	}
	
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http
		.csrf(csrf -> csrf.disable())
		.headers(headers -> headers.frameOptions().disable())
		.authorizeHttpRequests(auth -> auth
				.requestMatchers("/h2-console").permitAll()
				.requestMatchers("/login").permitAll()
				.anyRequest().authenticated()
		)
		.formLogin(form -> form
				.loginProcessingUrl("/login")
				.usernameParameter("email")
				.passwordParameter("password")
				.permitAll()
		);
		return http.build();
	}
}
