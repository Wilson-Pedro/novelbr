package com.novelsbr.backend.services.impl;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.novelsbr.backend.domain.dto.CommentDTO;
import com.novelsbr.backend.domain.entities.Author;
import com.novelsbr.backend.domain.entities.Comment;
import com.novelsbr.backend.domain.entities.CommentChapter;
import com.novelsbr.backend.domain.entities.CommentNovel;
import com.novelsbr.backend.enums.CommentBy;
import com.novelsbr.backend.exceptions.EntityNullException;
import com.novelsbr.backend.exceptions.NotFoundException;
import com.novelsbr.backend.exceptions.TypeNotFoundException;
import com.novelsbr.backend.repositories.CommentRepository;
import com.novelsbr.backend.services.AuthorService;
import com.novelsbr.backend.services.ChapterService;
import com.novelsbr.backend.services.CommentService;
import com.novelsbr.backend.services.CommentStrategy;
import com.novelsbr.backend.services.NovelService;
import com.novelsbr.backend.services.strategy.CommentChapterStrategy;
import com.novelsbr.backend.services.strategy.CommentNovelStrategy;

@Service
public class CommentServiceImpl implements CommentService {
	
	private final Map<CommentBy, CommentStrategy> commentStrategy = Map.of(
			CommentBy.NOVEL, new CommentNovelStrategy(),
			CommentBy.CHAPTER, new CommentChapterStrategy()
	);

	@Autowired
	private CommentRepository commentRepository;

	@Override
	public Comment save(CommentDTO commentDTO) {
		Comment commentSaved = preparingCommentToSave(commentDTO);
		if(commentSaved == null) throw new EntityNullException();
		
		if(commentDTO.getParentId() != null) {
			Comment commentFather = findById(commentDTO.getParentId());
			commentSaved.setCommentFather(commentFather);
		}
		return commentRepository.save(commentSaved);
	}
	
	public Comment findById(Long id) {
		return commentRepository.findById(id).orElseThrow(
				() -> new NotFoundException("Comment not found"));
	}
	
	@Override
	public List<Comment> findAll() {
		return commentRepository.findAll().stream()
				.filter(x -> x.getCommentFather() == null)
				.toList();
	}
	
	@Override
	public Comment update(CommentDTO commentDTO, Long id) {
		Comment commentUpdated= findById(id);
		commentUpdated.setBodyText(commentDTO.getBodyText());
		return commentRepository.save(commentUpdated);
	}
	
	@Override
	public void delete(Long id) {
		Comment comment = findById(id);
		commentRepository.delete(comment);
	}

	private Comment preparingCommentToSave(CommentDTO commentDTO) {
		
		CommentBy commentType = CommentBy.toEnum(commentDTO.getCommentByCode());
		
		return commentStrategy.get(commentType).getNewComment(commentDTO);
	}
}
