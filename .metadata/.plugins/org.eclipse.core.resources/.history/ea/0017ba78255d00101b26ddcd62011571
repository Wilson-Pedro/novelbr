package com.novelsbr.backend.services.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.novelsbr.backend.domain.dto.CommentDTO;
import com.novelsbr.backend.domain.entities.Author;
import com.novelsbr.backend.domain.entities.Comment;
import com.novelsbr.backend.domain.entities.CommentChapter;
import com.novelsbr.backend.domain.entities.CommentNovel;
import com.novelsbr.backend.enums.CommentType;
import com.novelsbr.backend.exceptions.EntityNullException;
import com.novelsbr.backend.exceptions.NotFoundException;
import com.novelsbr.backend.exceptions.TypeNotFoundException;
import com.novelsbr.backend.repositories.CommentRepository;
import com.novelsbr.backend.services.AuthorService;
import com.novelsbr.backend.services.ChapterService;
import com.novelsbr.backend.services.CommentService;
import com.novelsbr.backend.services.NovelService;

@Service
public class CommentServiceImpl implements CommentService {

	@Autowired
	private CommentRepository commentRepository;
	
	@Autowired
	private ChapterService chapterService;
	
	@Autowired
	private NovelService novelService;
	
	@Autowired
	private AuthorService authorService;

	@Override
	public void save(CommentDTO commentDTO) {
		Comment commentSaved = preparingCommentToSave(commentDTO);
		if(commentSaved == null) throw new EntityNullException();
		if(commentDTO.getCommentFatherId() != null) {
			Comment commentFather = findById(commentDTO.getCommentFatherId());
			commentSaved.setCommentFather(commentFather);
			
			List<Comment> comments = commentFather.getComments();
			comments.add(commentSaved);
			commentFather.setComments(comments);
			
			commentRepository.save(commentSaved);
			commentRepository.save(commentFather);
			return;
		}
		commentRepository.save(commentSaved);
	}
	
	public Comment findById(Long id) {
		return commentRepository.findById(id).orElseThrow(
				() -> new NotFoundException("Comment not found"));
	}
	
	@Override
	public List<Comment> findAll() {
		return commentRepository.findAll();
	}

	private Comment preparingCommentToSave(CommentDTO commentDTO) {
		Author author = authorService.findById(commentDTO.getAuthorId());
		
		if(commentDTO.getCommentCode() == 1) {
			CommentNovel commentNovel = new CommentNovel(commentDTO);
			commentNovel.setNovel(novelService.findById(commentDTO.getEntityId()));
			commentNovel.setAuthor(author);
			return commentNovel;
			
		} else if(commentDTO.getCommentCode() == 2) {
			CommentChapter commentChapter = new CommentChapter(commentDTO);
			commentChapter.setChapter(chapterService.findById(commentDTO.getEntityId()));
			commentChapter.setAuthor(author);
			return commentChapter;
			
		} else if(commentDTO.getCommentCode() > CommentType.values().length) {
			throw new TypeNotFoundException();
		}
		return null;
	}
}
