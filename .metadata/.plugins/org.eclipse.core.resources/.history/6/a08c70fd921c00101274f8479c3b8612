package com.novelsbr.backend.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.novelsbr.backend.services.AuthorDetailsService;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Autowired
	AuthorDetailsService authorDetailsService;
	
	@Bean
	PasswordEncoder passwordEncoder() {
		System.out.println("PasswordEncoder");
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	AuthenticationManager authenticationManager() throws Exception {
		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setUserDetailsService(authorDetailsService);
		provider.setPasswordEncoder(passwordEncoder());
		System.out.println("AuthenticationManager");
		return new ProviderManager(provider);
	}
	
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http
		.csrf(csrf -> csrf.disable())
		.cors(cors -> {})
		.authorizeHttpRequests(auth -> auth
				.requestMatchers("/auth/login").permitAll()
				.requestMatchers("/authors/").permitAll()
				.requestMatchers("/auth/me").permitAll()
				.anyRequest().authenticated()
		)
		.sessionManagement(session -> 
			session.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
		)
		.formLogin(AbstractHttpConfigurer::disable);
		return http.build();
	}
	
	@Bean
	WebMvcConfigurer corsConfig() {
		return new WebMvcConfigurer() {
			@Override
			public void addCorsMappings(CorsRegistry registry) {
				registry.addMapping("/**")
						.allowedOrigins("http://localhost:3000")
						.allowedMethods("*")
						.allowCredentials(true);
			}
		};
	}
}
