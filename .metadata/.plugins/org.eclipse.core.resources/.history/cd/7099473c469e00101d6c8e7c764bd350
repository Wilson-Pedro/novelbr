package com.novelsbr.backend.exceptions;

import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.novelsbr.backend.domain.dto.NovelDTO;
import com.novelsbr.backend.domain.entities.Author;
import com.novelsbr.backend.domain.entities.Genre;
import com.novelsbr.backend.domain.entities.Novel;
import com.novelsbr.backend.domain.entities.NovelStatus;
import com.novelsbr.backend.enums.GenderType;
import com.novelsbr.backend.enums.NovelStatusType;
import com.novelsbr.backend.enums.UserRole;
import com.novelsbr.backend.repositories.AuthorRepository;
import com.novelsbr.backend.repositories.ChapterRepository;
import com.novelsbr.backend.repositories.GenreRepository;
import com.novelsbr.backend.repositories.NovelRepository;
import com.novelsbr.backend.repositories.NovelStatusRepository;
import com.novelsbr.backend.services.NovelService;


@SpringBootTest
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class NovelExceptionsTest {
	
	@Autowired
	NovelRepository novelRepository;
	
	@Autowired
	NovelStatusRepository novelStatusRepository;
	
	@Autowired
	AuthorRepository authorRepository;
	
	@Autowired
	GenreRepository genreRepository;
	
	@Autowired
	NovelService novelService;
	
	@Autowired
	ChapterRepository chapterRepository;
	
	Set<Genre> genders = new HashSet<>();
	List<NovelStatus> novelStatsus = new ArrayList();
	List<String> gendersStr = new ArrayList<>();
	
	Author author = new Author(null, "João", "AllStar", "joao@gmail.com", "1234", UserRole.AUTHOR);
	
	Novel novel = new Novel(null, 
			"A casa ao Lado", 
			author, 
			new NovelStatus(NovelStatusType.IN_COURSE), 
			genders, 
			"Ao se mudar para uma cidade pacata em busca de recomeço, Laura aluga uma casa simples ao lado de uma propriedade antiga e abandonada. Logo, começa a ouvir sussurros durante a noite e vê sombras se movendo pelas janelas da casa vizinha. Os moradores evitam o assunto, mas uma lenda local fala de desaparecimentos ligados àquela casa. À medida que Laura investiga, descobre que a casa não está vazia e nunca esteve...",
			"https://img.freepik.com/fotos-gratis/ilustracao-do-ceu-noturno-do-anime_23-2151684373.jpg?t=st=1745495843~exp=1745499443~hmac=0cfb3ba2c360f31102c8f3162258fddb8078cddf9512064c3643d0673914d2d8&w=360");
	
	@Test
	@Order(1)
	void preparingTestEnvironment() {
		chapterRepository.deleteAll();
		novelRepository.deleteAll();
		genreRepository.deleteAll();
		authorRepository.deleteAll();
		Integer id = 1;
		
		for(GenderType type : GenderType.values()) {
			genders.add(new Genre(type));
			id++;
		}
		
		for(NovelStatusType type : NovelStatusType.values()) {
			novelStatsus.add(new NovelStatus(type));
		}
		
		gendersStr = genders.stream().map(g -> g.getGenderType().getType()).toList();
		
		novelStatusRepository.saveAll(novelStatsus);
		genreRepository.saveAll(genders);
		authorRepository.save(author);
		novelRepository.save(novel);
	}

	@Test
	void novelNotFound_WithIdNonexistent() {
		assertThrows(NotFoundException.class, () -> novelService.findById(700L));
	}

	@Test
	void novelInfoNotFound_WithIdNonexistent() {
		assertThrows(NotFoundException.class, () -> novelService.findNovelInfoByNovelId(700L));
	}
	
	@Test
	void existingNovelException_With_existingNovelName() {
		assertThrows(ExistingNovelException.class, () -> novelService.save(new NovelDTO(this.novel)));
	}
	
	@Test
	void nullEntityException_When_NovelIsNull() {
		assertThrows(NullEntityException.class, () -> novelService.save(null));
	}
	
	@Test
	void nullFildException_When_NovelNameIsBlank() {
		NovelDTO novelDto = new NovelDTO(null, "", this.author.getId(), 1, gendersStr, "synopsis", "imageUri");
		assertThrows(NullFieldException.class, () -> novelService.save(novelDto));
	}
	
	@Test
	void nullFildException_When_SynopsisIsBlank() {
		NovelDTO novelDto = new NovelDTO(null, "NovelTest", this.author.getId(), 1, gendersStr, "", "imageUri");
		assertThrows(NullFieldException.class, () -> novelService.save(novelDto));
	}
	
	@Test
	void nullFildException_When_ImageUriIsBlank() {
		NovelDTO novelDto = new NovelDTO(null, "NovelTest", this.author.getId(), 1, gendersStr, "synopsis", "");
		assertThrows(NullFieldException.class, () -> novelService.save(novelDto));
	}
}
