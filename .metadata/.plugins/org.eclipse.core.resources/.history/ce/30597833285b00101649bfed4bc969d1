package com.novelsbr.backend.domain.entities;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.hibernate.annotations.CreationTimestamp;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.novelsbr.backend.domain.dto.CommentDTO;
import com.novelsbr.backend.enums.CommentType;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

@Entity
@Table(name = "TBL_COMMENT")
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public class Comment implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;
	
	@ManyToOne
	@JoinColumn(name = "author_id")
	private Author author;
	
	@Enumerated(EnumType.STRING)
	private CommentType commentType;
	
	@Column(columnDefinition = "TEXT")
	private String text;
	
	@ManyToOne
	@JoinColumn(name = "comment_father")
	@JsonBackReference
	private Comment commentFather;
	
	@OneToMany(mappedBy = "commentFather", cascade = CascadeType.ALL)
	@JsonManagedReference
	private List<Comment> comments = new ArrayList<>();
	
	@CreationTimestamp
	private LocalDateTime dateRegistration;
	
	public Comment() {
	}
	
	public Comment(CommentDTO commentDTO) {
		this.id = commentDTO.getId();
		this.commentType = CommentType.toEnum(commentDTO.getCommentCode());
		this.text = commentDTO.getText();
		this.dateRegistration = commentDTO.getDateRegistration();
	}

	public Comment(Long id, Author author, CommentType commentType, String text, LocalDateTime dateRegistration) {
		this.id = id;
		this.author = author;
		this.commentType = commentType;
		this.text = text;
		this.dateRegistration = dateRegistration;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Author getAuthor() {
		return author;
	}

	public void setAuthor(Author author) {
		this.author = author;
	}

	public CommentType getCommentType() {
		return commentType;
	}

	public void setCommentType(CommentType commentType) {
		this.commentType = commentType;
	}

	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text;
	}

	public LocalDateTime getDateRegistration() {
		return dateRegistration;
	}
	
	public boolean isNovel() {
		return this.commentType.equals(CommentType.NOVEL);
	}
	
	public boolean isChapter() {
		return this.commentType.equals(CommentType.CHAPTER);
	}

	@Override
	public int hashCode() {
		return Objects.hash(author, commentType, dateRegistration, id, text);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Comment other = (Comment) obj;
		return Objects.equals(author, other.author) && commentType == other.commentType
				&& Objects.equals(dateRegistration, other.dateRegistration) && Objects.equals(id, other.id)
				&& Objects.equals(text, other.text);
	}
}
