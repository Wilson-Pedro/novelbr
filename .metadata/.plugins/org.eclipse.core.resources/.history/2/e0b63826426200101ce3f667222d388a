package com.novelsbr.backend.services.impl;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.novelsbr.backend.domain.dto.AuthorNovelInfoDTO;
import com.novelsbr.backend.domain.dto.CardNovelDTO;
import com.novelsbr.backend.domain.dto.NovelDTO;
import com.novelsbr.backend.domain.entities.Gender;
import com.novelsbr.backend.domain.entities.Novel;
import com.novelsbr.backend.domain.entities.NovelStatus;
import com.novelsbr.backend.enums.GenderType;
import com.novelsbr.backend.enums.NovelStatusType;
import com.novelsbr.backend.exceptions.ExistingNovelException;
import com.novelsbr.backend.exceptions.NotFoundException;
import com.novelsbr.backend.repositories.AuthorRepository;
import com.novelsbr.backend.repositories.NovelRepository;
import com.novelsbr.backend.services.NovelService;
import com.novelsbr.backend.services.NovelStatusService;

import jakarta.transaction.Transactional;

@Service
public class NovelServiceImpl implements NovelService {
	
	@Autowired
	private NovelRepository novelRepository;
	
	@Autowired
	private AuthorRepository authorRepository;
	
	@Autowired
	private NovelStatusService novelStatusService;

	@Override
	@Transactional
	public Novel save(NovelDTO novelDTO) {
		validadeRegistration(novelDTO);
		if(novelDTO.getImageUri() == null) novelDTO.setImageUri("");
		NovelStatus novelStatus = novelStatusService.findById(novelDTO.getNovelStatusCode());
//		NovelStatus novelStatus = novelStatusService.findByNovelStatusType(NovelStatusType.IN_COURSE);
		Novel novel = new Novel(novelDTO);
		novel.setAuthor(authorRepository.findById(novelDTO.getAuthorId()).orElseThrow(NotFoundException::new));
		novel.setGenders(stringsToGenders(novelDTO.getGenders()));
		novel.setNovelStatus(novelStatus);
		return novelRepository.save(novel);
	}

	private Set<Gender> stringsToGenders(List<String> gendersStr) {
		List<Gender> gendersList = GenderType.stringToGender(gendersStr).stream()
				.map(gender -> new Gender(gender))
				.toList();
		return new HashSet<>(gendersList);
	}

	@Override
	public List<Novel> findAll() {
		return novelRepository.findAll();
	}
	
	@Override
	public List<Novel> searchNovel(String novelName) {
		return novelRepository.findByNovelNameContainingIgnoreCase(novelName);
	}

	@Override
	public List<CardNovelDTO> findNovelCards() {
		return novelRepository.findNovelCards().stream()
				.map(CardNovelDTO::new).toList();
	}
	
	@Override
	public List<CardNovelDTO> findNovelCardsByUsername(String username) {
		return novelRepository.findNovelCardsByUsername(username).stream()
				.map(CardNovelDTO::new).toList();
	}

	@Override
	public AuthorNovelInfoDTO findNovelInfoByNovelId(Long novelId) {
		return new AuthorNovelInfoDTO(novelRepository.findNovelInfoByNovelId(novelId)
				.orElseThrow(() -> new NotFoundException("Novel Info not found.")));
	}

	@Override
	public Novel findById(Long id) {
		return novelRepository.findById(id).orElseThrow(
				() -> new NotFoundException("Novel not found."));
	}

	@Override
	public boolean existsByNovelName(String novelName) {
		return novelRepository.existsByNovelName(novelName);
	}
	
	public void validadeRegistration(NovelDTO novelDTO) {
		if(existsByNovelName(novelDTO.getNovelName())) throw new ExistingNovelException(
				"There is already a Novel with this name.");
	}
}
