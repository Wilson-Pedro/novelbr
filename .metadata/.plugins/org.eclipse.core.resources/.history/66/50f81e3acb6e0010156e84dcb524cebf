package com.novelsbr.backend.controllers;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.novelsbr.backend.domain.dto.CommentDTO;
import com.novelsbr.backend.domain.entities.Author;
import com.novelsbr.backend.domain.entities.Chapter;
import com.novelsbr.backend.domain.entities.Gender;
import com.novelsbr.backend.domain.entities.Novel;
import com.novelsbr.backend.domain.entities.NovelStatus;
import com.novelsbr.backend.enums.GenderType;
import com.novelsbr.backend.enums.NovelStatusType;
import com.novelsbr.backend.enums.UserRole;
import com.novelsbr.backend.infra.security.TokenService;
import com.novelsbr.backend.repositories.AuthorRepository;
import com.novelsbr.backend.repositories.ChapterRepository;
import com.novelsbr.backend.repositories.CommentRepository;
import com.novelsbr.backend.repositories.GenderRepository;
import com.novelsbr.backend.repositories.NovelRepository;
import com.novelsbr.backend.repositories.NovelStatusRepository;
import com.novelsbr.backend.services.AuthorService;
import com.novelsbr.backend.services.ChapterService;
import com.novelsbr.backend.services.CommentService;
import com.novelsbr.backend.services.NovelService;

@SpringBootTest
@AutoConfigureMockMvc
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class CommentControllerTest {
	
	@Autowired
	CommentRepository commentRepository;
	
	@Autowired
	CommentService commentService;
	
	@Autowired
	ChapterRepository chapterRepository;
	
	@Autowired
	ChapterService chapterService;
	
	@Autowired
	NovelRepository novelRepository;
	
	@Autowired
	NovelService novelService;
	
	@Autowired
	AuthorRepository authorRepository;
	
	@Autowired
	AuthorService authorService;
	
	@Autowired
	GenderRepository genderRepository;
	
	@Autowired
	NovelStatusRepository novelStatusRepository;
	
	@Autowired
	AuthenticationManager authenticationManager;
	
	@Autowired
	TokenService tokenService;
	
	@Autowired
	MockMvc mockMvc;
	
	@Autowired
	ObjectMapper objectMapper;
	
	Set<Gender> genders = new HashSet<>();
	List<NovelStatus> novelStatsus = new ArrayList();
	
	Author author = new Author(null, "João", "AllStar", "joao@gmail.com", "1234", UserRole.AUTHOR);
	
    Novel novel = new Novel(null,
            "Jornada para o Além",
            author,
            new NovelStatus(NovelStatusType.IN_COURSE),
            genders,
            "Em um mundo medieval repleto de magia, criaturas ancestrais e civilizações esquecidas, a profecia do Grande Véu finalmente se concretiza...",
            "https://wallpapercave.com/wp/wp5044832.jpg");

    Chapter chapter = new Chapter(null, "Começo", "Excelente começo!", novel);
	
	static String URI = "/comments";
	
	static String TOKEN = "";
	
	@Test
	@Order(1)
	void preparingTestEnvironment() {
	       chapterRepository.deleteAll();
	       novelRepository.deleteAll();
	       novelStatusRepository.deleteAll();
	       genderRepository.deleteAll();
	       authorRepository.deleteAll();
	       Integer id = 1;

	       for(GenderType type : GenderType.values()) {
	          genders.add(new Gender(type));
	          id++;
	       }

	       for(NovelStatusType type : NovelStatusType.values()) {
	          novelStatsus.add(new NovelStatus(type));
	       }

	       novelStatusRepository.saveAll(novelStatsus);
	       genderRepository.saveAll(genders);
	       author = authorRepository.save(author);
	       novelRepository.save(novel);
	       chapterRepository.save(chapter);
	}
	
	@Test
	@Order(2)
	void save() throws Exception {
		
    	Long authorId = authorRepository.findAll().get(0).getId();
    	Long novelId = novelRepository.findAll().get(0).getId();
    	
		CommentDTO commentNovelDTO = new CommentDTO(null, authorId, author.getUsername(), 1, novelId, "História Incrível");
		
		String jsonRequestCommentNovel = objectMapper.writeValueAsString(commentNovelDTO);
			
		mockMvc.perform(post(URI + "/")
				.contentType(MediaType.APPLICATION_JSON)
				.content(jsonRequestCommentNovel))
				.andExpect(status().isCreated())
				.andExpect(jsonPath("$.username", equalTo(author.getUsername())))
				.andExpect(jsonPath("$.bodyText", equalTo(commentNovelDTO.getBodyText())));
		
		assertEquals(1, commentRepository.count());
	}
	
	@Test
	@Order(3)
	void findAll() throws Exception {
		
    	Long authorId = authorRepository.findAll().get(0).getId();
    	Long novelId = novelRepository.findAll().get(0).getId();
    	
		CommentDTO commentNovelDTO = new CommentDTO(null, authorId, author.getUsername(), 1, novelId, "História Incrível");
					
		mockMvc.perform(get(URI)
				.contentType(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk());
		
		assertEquals(1, commentRepository.count());
	}
}
